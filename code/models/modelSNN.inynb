{"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"1WdhSgaYTVa8A6XXBF78daKO1bMOG-RfJ","timestamp":1715088660797}]},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8430826,"sourceType":"datasetVersion","datasetId":5019825}],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Install libraries","metadata":{"id":"KlV3MYDVHF8m"}},{"cell_type":"code","source":"!pip3 install snntorch --quiet\n!pip install speech2spikes --quiet","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":87816,"status":"ok","timestamp":1715599656049,"user":{"displayName":"Cosmin Moarcas","userId":"14702628077803766651"},"user_tz":-180},"id":"FCnZz7WlFQjv","outputId":"6b6218ca-e12e-4676-9768-be779c991e88","execution":{"iopub.status.busy":"2024-05-16T12:45:29.864808Z","iopub.execute_input":"2024-05-16T12:45:29.865586Z","iopub.status.idle":"2024-05-16T12:45:59.303989Z","shell.execute_reply.started":"2024-05-16T12:45:29.865551Z","shell.execute_reply":"2024-05-16T12:45:59.302612Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"markdown","source":"## Imports","metadata":{"id":"maez1obb8AQN"}},{"cell_type":"code","source":"# from google.colab import drive\n\nfrom torch.utils.data import Dataset, DataLoader\nimport torch\nfrom torch import nn\nimport torch.nn.functional as F\n\nimport snntorch as snn\nfrom snntorch import surrogate\nfrom snntorch import backprop\nfrom snntorch import functional as SF\nfrom snntorch import utils\nfrom snntorch import spikeplot as splt\n\nfrom sklearn import preprocessing\n\nfrom sklearn.metrics import confusion_matrix\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nimport pandas as pd\n\nfrom tqdm import tqdm","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6771,"status":"ok","timestamp":1715599662814,"user":{"displayName":"Cosmin Moarcas","userId":"14702628077803766651"},"user_tz":-180},"id":"DWWUO0_i77vu","outputId":"3f6464ee-c0eb-4e5f-b9e0-148c81249f44","execution":{"iopub.status.busy":"2024-05-16T12:46:08.593457Z","iopub.execute_input":"2024-05-16T12:46:08.594249Z","iopub.status.idle":"2024-05-16T12:46:08.981903Z","shell.execute_reply.started":"2024-05-16T12:46:08.594208Z","shell.execute_reply":"2024-05-16T12:46:08.980955Z"},"trusted":true},"execution_count":52,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/1576457613.py:10: DeprecationWarning: The module snntorch.backprop will be deprecated in  a future release. Writing out your own training loop will lead to substantially faster performance.\n  from snntorch import backprop\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Mount google drive","metadata":{"id":"9-6dK5-P8J2D"}},{"cell_type":"code","source":"# drive.mount('/content/drive/')","metadata":{"id":"QOhdzydT8Lip","execution":{"iopub.status.busy":"2024-05-16T10:19:34.610658Z","iopub.execute_input":"2024-05-16T10:19:34.611297Z","iopub.status.idle":"2024-05-16T10:19:34.614962Z","shell.execute_reply.started":"2024-05-16T10:19:34.611263Z","shell.execute_reply":"2024-05-16T10:19:34.614071Z"},"trusted":true},"execution_count":138,"outputs":[]},{"cell_type":"markdown","source":"## Select device","metadata":{"id":"Mln2GgCNKBUA"}},{"cell_type":"code","source":"device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\nprint(\"Training on\", device)","metadata":{"id":"hS-zNBPEKDYB","execution":{"iopub.status.busy":"2024-05-16T12:06:49.828814Z","iopub.execute_input":"2024-05-16T12:06:49.829850Z","iopub.status.idle":"2024-05-16T12:06:49.890558Z","shell.execute_reply.started":"2024-05-16T12:06:49.829816Z","shell.execute_reply":"2024-05-16T12:06:49.889449Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Training on cuda\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Dataset class","metadata":{"id":"XCXdzlBN8d7V"}},{"cell_type":"code","source":"class AudioDataset(Dataset):\n    def __init__(self, data_filepath, labels_filepath):\n        self.data = np.load(data_filepath)\n        self.labels = np.load(labels_filepath)\n        \n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, idx):\n        data = self.data[idx]\n        label = self.labels[idx]\n        return data, label\n    \nfeatures_path = '/kaggle/input/audio-dataset/mfcc_features.npy'\nlabels_path = '/kaggle/input/audio-dataset/labels.npy'\ndataset = AudioDataset(data_filepath=features_path, labels_filepath=labels_path)","metadata":{"execution":{"iopub.status.busy":"2024-05-16T12:52:32.985114Z","iopub.execute_input":"2024-05-16T12:52:32.985524Z","iopub.status.idle":"2024-05-16T12:52:33.091026Z","shell.execute_reply.started":"2024-05-16T12:52:32.985493Z","shell.execute_reply":"2024-05-16T12:52:33.090171Z"},"trusted":true},"execution_count":85,"outputs":[]},{"cell_type":"markdown","source":"## Normalize function","metadata":{}},{"cell_type":"code","source":"def normalize(data):\n    # TODO: try this\n#     data = (data - np.min(data, axis=0)) / (np.max(data, axis=0) - np.min(data, axis=0))\n    data = (data - np.min(data)) / (np.max(data) - np.min(data))    \n    return data","metadata":{"execution":{"iopub.status.busy":"2024-05-16T12:52:33.293750Z","iopub.execute_input":"2024-05-16T12:52:33.294081Z","iopub.status.idle":"2024-05-16T12:52:33.299101Z","shell.execute_reply.started":"2024-05-16T12:52:33.294051Z","shell.execute_reply":"2024-05-16T12:52:33.298013Z"},"trusted":true},"execution_count":86,"outputs":[]},{"cell_type":"markdown","source":"## Dataloader","metadata":{"id":"_9MpqTm89j8F"}},{"cell_type":"code","source":"# split the dataset into three parts (train 70%, test 15%, validation 15%)\ntest_size = 0.15\nval_size = 0.15\n\ntest_amount, val_amount = int(dataset.__len__() * test_size), int(dataset.__len__() * val_size)\n\ntrain_set, val_set, test_set = torch.utils.data.random_split(dataset, [\n            (dataset.__len__() - (test_amount + val_amount)),\n            test_amount,\n            val_amount\n])\n\ntrain_set.dataset.data = normalize(train_set.dataset.data)\nval_set.dataset.data = normalize(val_set.dataset.data)\ntest_set.dataset.data = normalize(test_set.dataset.data)\n\nB = 128\n\ntrain_dataloader = torch.utils.data.DataLoader(\n            train_set,\n            batch_size=B,\n            shuffle=True,\n            drop_last=True,\n)\nval_dataloader = torch.utils.data.DataLoader(\n            val_set,\n            batch_size=B,\n            shuffle=False,\n            drop_last=True,\n)\ntest_dataloader = torch.utils.data.DataLoader(\n            test_set,\n            batch_size=B,\n            shuffle=False,\n            drop_last=True,\n)","metadata":{"id":"726mQPTu9lHz","execution":{"iopub.status.busy":"2024-05-16T12:53:23.362372Z","iopub.execute_input":"2024-05-16T12:53:23.362755Z","iopub.status.idle":"2024-05-16T12:53:23.978647Z","shell.execute_reply.started":"2024-05-16T12:53:23.362725Z","shell.execute_reply":"2024-05-16T12:53:23.977657Z"},"trusted":true},"execution_count":94,"outputs":[]},{"cell_type":"markdown","source":"## Train/eval functions","metadata":{"id":"VP5-QH0KI7i4"}},{"cell_type":"code","source":"def train_epoch(model, train_dataloader, loss_crt, optimizer, device):\n    \"\"\"\n    model: Model object\n    train_dataloader: DataLoader over the training dataset\n    loss_crt: loss function object\n    optimizer: Optimizer object\n    device: torch.device('cpu) or torch.device('cuda')\n\n    The function returns:\n     - the epoch training loss, which is an average over the individual batch\n       losses\n    \"\"\"\n    model.train()\n    epoch_loss = 0.0\n    epoch_accuracy = 0.0\n    number_samples = 0\n    num_batches = len(train_dataloader)\n\n    print('Train epoch')\n    for batch_idx, batch in tqdm(enumerate(train_dataloader), unit=\"batch\", total=len(train_dataloader)):\n        # shape: batch_size x 13 x 87, batch_size \n        batch_data, batch_labels = batch\n\n        # move data to GPU\n        batch_data = batch_data.to(device)\n        batch_labels = batch_labels.to(device)\n\n        spk_rec, _ = model(batch_data)\n        assert spk_rec.shape == (time_steps ,B, 9)\n    \n        # Sum over all simulation of num_steps iterations\n        spike_count = spk_rec.sum(0)\n        assert spike_count.shape == (B, 9)\n\n        # intialize the loss and sum over time\n        loss_val = torch.zeros((1), dtype=torch.float, device=device)\n        loss_val += loss_crt(spike_count, batch_labels)\n        \n        # Gradient calculation + weight update\n        # set all gradients to 0\n        optimizer.zero_grad()\n        # BACKPROPAGATE the gradients\n        loss_val.backward()\n        # use the gradients to OPTIMISE the model\n        optimizer.step()\n        \n        epoch_loss += loss_val.item()\n        \n        # Calculate accuracy\n        _, max_spike = spike_count.max(1)\n\n        # correct classes for one batch\n        num_correct = (max_spike == batch_labels).sum()\n\n        # total accuracy\n        number_samples += len(batch_labels)\n        epoch_accuracy += num_correct\n\n        \n    epoch_loss = epoch_loss / num_batches\n    epoch_accuracy = epoch_accuracy / number_samples\n\n    return epoch_accuracy, epoch_loss\n\n\ndef eval_epoch(model, val_dataloader, loss_crt, device):\n    \"\"\"\n    model: Model object\n    val_dataloader: DataLoader over the validation dataset\n    loss_crt: loss function object\n    device: torch.device('cpu) or torch.device('cuda')\n\n    The function returns:\n     - the epoch validation loss, which is an average over the individual batch\n       losses\n    \"\"\"\n    model.eval()\n    epoch_loss = 0.0\n    epoch_accuracy = 0.0\n    number_samples = 0\n    num_batches = len(val_dataloader)\n    with torch.no_grad():\n        print('Eval epoch')\n        for batch_idx, batch in tqdm(enumerate(val_dataloader), unit=\"batch\", total=len(val_dataloader)):\n            # shape: batch_size x 13 x 345, batch_size\n            batch_data, batch_labels = batch\n\n            # move data to GPU\n            batch_data = batch_data.to(device)\n            batch_labels = batch_labels.to(device)\n\n            spk_rec, _ = model(batch_data)\n            assert spk_rec.shape == (time_steps ,B, 9)\n            \n            # Sum over all simulation of num_steps iterations\n            spike_count = spk_rec.sum(0)\n            assert spike_count.shape == (B, 9)\n\n            # intialize the loss and sum over time\n            loss_val = torch.zeros((1), dtype=torch.float, device=device)\n            loss_val += loss_crt(spike_count, batch_labels)\n\n            epoch_loss += loss_val.item()\n            \n            # Calculate accuracy\n            _, max_spike = spike_count.max(1)\n\n            # correct classes for one batch\n            num_correct = (max_spike == batch_labels).sum()\n\n            # total accuracy\n            number_samples += len(batch_labels)\n            epoch_accuracy += num_correct\n\n\n    epoch_loss = epoch_loss / num_batches\n    epoch_accuracy = epoch_accuracy / number_samples\n\n    return epoch_accuracy, epoch_loss","metadata":{"id":"_jaiFzRQIZ_2","execution":{"iopub.status.busy":"2024-05-16T12:53:38.970013Z","iopub.execute_input":"2024-05-16T12:53:38.970546Z","iopub.status.idle":"2024-05-16T12:53:38.990083Z","shell.execute_reply.started":"2024-05-16T12:53:38.970509Z","shell.execute_reply":"2024-05-16T12:53:38.989140Z"},"trusted":true},"execution_count":100,"outputs":[]},{"cell_type":"markdown","source":"## Neuron and simulation parameters","metadata":{}},{"cell_type":"code","source":"num_input = 13\nnum_hidden = 128\nnum_output = 9\n\nbeta_lif1 = torch.rand(num_hidden)\nbeta_lif2 = torch.rand(num_output)\nthreshold_lif1 = torch.rand(num_hidden)\nthreshold_lif2 = torch.rand(num_output)\ntime_steps = 345","metadata":{"execution":{"iopub.status.busy":"2024-05-16T12:55:03.246327Z","iopub.execute_input":"2024-05-16T12:55:03.247325Z","iopub.status.idle":"2024-05-16T12:55:03.253211Z","shell.execute_reply.started":"2024-05-16T12:55:03.247287Z","shell.execute_reply":"2024-05-16T12:55:03.252203Z"},"trusted":true},"execution_count":105,"outputs":[]},{"cell_type":"markdown","source":"## Model class","metadata":{"id":"zqNhw9CUAt6D"}},{"cell_type":"code","source":"class AccentClassifier(nn.Module):\n    def __init__(self):\n        super().__init__()\n        \n        self.fc1 = nn.Linear(in_features = num_input, out_features = num_hidden)\n        self.lif1 = snn.Leaky(beta=beta_lif1, learn_beta=True, threshold=threshold_lif1, learn_threshold=True)\n        self.fc2 = nn.Linear(in_features = num_hidden, out_features = num_output)\n        self.lif2 = snn.Leaky(beta=beta_lif2, learn_beta=True, threshold=threshold_lif2, learn_threshold=True)\n\n\n    def forward(self, x):\n        # Initialize hidden states and outputs at t=0\n        mem1 = self.lif1.init_leaky()\n        mem2 = self.lif2.init_leaky()\n        \n        # Record the final layer over time\n        mem_rec = []\n        spk_rec = []\n\n        # time-loop\n        for step in range(time_steps):\n            cur1 = self.fc1(x[:, :, step])\n            assert cur1.shape == (B, num_hidden)\n            spk1, mem1 = self.lif1(cur1, mem1)\n            assert spk1.shape == (B, num_hidden)\n                \n            cur2 = self.fc2(spk1)\n            assert cur2.shape == (B, num_output)\n            spk2, mem2 = self.lif2(cur2, mem2)\n            assert spk2.shape == (B, num_output)\n            \n            spk_rec.append(spk2)\n            mem_rec.append(mem2)\n\n        spk_rec = torch.stack(spk_rec, dim=0)\n        mem_rec = torch.stack(mem_rec, dim=0)\n        \n        assert spk_rec.shape == (time_steps, B, num_output)\n        assert mem_rec.shape == (time_steps, B, num_output)\n        \n        return spk_rec, mem_rec\n\nmodel = AccentClassifier().to(device)","metadata":{"execution":{"iopub.status.busy":"2024-05-16T12:56:00.989838Z","iopub.execute_input":"2024-05-16T12:56:00.990569Z","iopub.status.idle":"2024-05-16T12:56:01.004204Z","shell.execute_reply.started":"2024-05-16T12:56:00.990537Z","shell.execute_reply":"2024-05-16T12:56:01.003197Z"},"trusted":true},"execution_count":106,"outputs":[]},{"cell_type":"markdown","source":"## Hyperparameters","metadata":{"id":"dsX_3CCCJhsm"}},{"cell_type":"code","source":"hyperparams = {\n    'lr': 5e-4,\n    'betas': (0.9, 0.999),\n    'num_epochs': 5,\n    'optimizer': \"adam\",\n    'momentum': 0.9,\n}\n\nloss_criterion = nn.CrossEntropyLoss()\n\nif hyperparams['optimizer'] == 'adam':\n    optimizer = torch.optim.Adam(\n        params=model.parameters(),\n        lr=hyperparams['lr'],\n        betas=hyperparams['betas']\n    )\nelif hyperparams['optimizer'] == 'sgd':\n    optimizer = torch.optim.SGD(\n        params=model.parameters(),\n        lr=hyperparams['lr'],\n        momentum=hyperparams['momentum']\n    )","metadata":{"id":"-IG7pcgkDiw6","execution":{"iopub.status.busy":"2024-05-16T12:56:02.415620Z","iopub.execute_input":"2024-05-16T12:56:02.416405Z","iopub.status.idle":"2024-05-16T12:56:02.423017Z","shell.execute_reply.started":"2024-05-16T12:56:02.416373Z","shell.execute_reply":"2024-05-16T12:56:02.422074Z"},"trusted":true},"execution_count":107,"outputs":[]},{"cell_type":"markdown","source":"## Train loop","metadata":{"id":"Iw6TpiLhIYUc"}},{"cell_type":"code","source":"hyperparams['num_epochs'] = 15\ntrain_losses = []\ntrain_accuracies = []\nval_losses = []\nval_accuracies = []\n\nfor epoch in range(1, hyperparams['num_epochs'] + 1):\n    train_accuracy, train_loss = train_epoch(model, train_dataloader, loss_criterion, optimizer, device)\n    val_accuracy, val_loss = eval_epoch(model, val_dataloader, loss_criterion, device)\n\n    train_losses.append(train_loss)\n    val_losses.append(val_loss)\n    train_accuracies.append(train_accuracy)\n    val_accuracies.append(val_accuracy)\n\n    print('\\nEpoch %d'%(epoch))\n    print('train loss: %10.8f, accuracy: %10.8f'%(train_loss, train_accuracy))\n    print('val loss: %10.8f, accuracy: %10.8f'%(val_loss, val_accuracy))","metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"pAwmHETaI81F","outputId":"6a566a29-9991-48a0-899e-1519cedfb669","execution":{"iopub.status.busy":"2024-05-16T12:56:03.075885Z","iopub.execute_input":"2024-05-16T12:56:03.076580Z","iopub.status.idle":"2024-05-16T13:13:01.251504Z","shell.execute_reply.started":"2024-05-16T12:56:03.076546Z","shell.execute_reply":"2024-05-16T13:13:01.250550Z"},"trusted":true},"execution_count":108,"outputs":[{"name":"stdout","text":"Train epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 94/94 [01:02<00:00,  1.50batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Eval epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 20/20 [00:05<00:00,  3.36batch/s]\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 1\ntrain loss: 16.08787494, accuracy: 0.23362699\nval loss: 2.35984589, accuracy: 0.27304688\nTrain epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 94/94 [01:02<00:00,  1.51batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Eval epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 20/20 [00:05<00:00,  3.49batch/s]\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 2\ntrain loss: 2.50960468, accuracy: 0.25897604\nval loss: 2.39116101, accuracy: 0.23906250\nTrain epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 94/94 [01:01<00:00,  1.52batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Eval epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 20/20 [00:05<00:00,  3.52batch/s]\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 3\ntrain loss: 2.47244202, accuracy: 0.27775931\nval loss: 2.39872291, accuracy: 0.27070314\nTrain epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 94/94 [01:02<00:00,  1.50batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Eval epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 20/20 [00:05<00:00,  3.49batch/s]\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 4\ntrain loss: 2.35179283, accuracy: 0.30061501\nval loss: 2.32099645, accuracy: 0.29257813\nTrain epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 94/94 [01:02<00:00,  1.50batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Eval epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 20/20 [00:05<00:00,  3.43batch/s]\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 5\ntrain loss: 2.36220477, accuracy: 0.30410570\nval loss: 2.37036421, accuracy: 0.26562500\nTrain epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 94/94 [01:01<00:00,  1.52batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Eval epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 20/20 [00:05<00:00,  3.41batch/s]\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 6\ntrain loss: 2.59989071, accuracy: 0.31092086\nval loss: 2.46819118, accuracy: 0.34570312\nTrain epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 94/94 [01:02<00:00,  1.51batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Eval epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 20/20 [00:05<00:00,  3.51batch/s]\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 7\ntrain loss: 2.55598159, accuracy: 0.33203125\nval loss: 2.65652550, accuracy: 0.30781251\nTrain epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 94/94 [01:01<00:00,  1.52batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Eval epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 20/20 [00:05<00:00,  3.49batch/s]\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 8\ntrain loss: 2.43716370, accuracy: 0.35339093\nval loss: 2.39107965, accuracy: 0.36015627\nTrain epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 94/94 [01:02<00:00,  1.51batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Eval epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 20/20 [00:05<00:00,  3.45batch/s]\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 9\ntrain loss: 2.45378595, accuracy: 0.36519280\nval loss: 2.38853555, accuracy: 0.39804688\nTrain epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 94/94 [01:02<00:00,  1.52batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Eval epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 20/20 [00:05<00:00,  3.49batch/s]\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 10\ntrain loss: 2.53621183, accuracy: 0.37840757\nval loss: 2.73616887, accuracy: 0.38203126\nTrain epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 94/94 [01:01<00:00,  1.53batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Eval epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 20/20 [00:05<00:00,  3.47batch/s]\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 11\ntrain loss: 2.89242137, accuracy: 0.37649599\nval loss: 2.19625453, accuracy: 0.36718750\nTrain epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 94/94 [01:02<00:00,  1.51batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Eval epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 20/20 [00:05<00:00,  3.48batch/s]\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 12\ntrain loss: 2.46676157, accuracy: 0.39286900\nval loss: 2.63867018, accuracy: 0.39140627\nTrain epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 94/94 [01:02<00:00,  1.52batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Eval epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 20/20 [00:05<00:00,  3.54batch/s]\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 13\ntrain loss: 2.84339541, accuracy: 0.39428189\nval loss: 2.58464586, accuracy: 0.39609376\nTrain epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 94/94 [01:01<00:00,  1.53batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Eval epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 20/20 [00:05<00:00,  3.52batch/s]\n","output_type":"stream"},{"name":"stdout","text":"\nEpoch 14\ntrain loss: 2.61999155, accuracy: 0.40683177\nval loss: 2.70595241, accuracy: 0.39921877\nTrain epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 94/94 [01:02<00:00,  1.52batch/s]\n","output_type":"stream"},{"name":"stdout","text":"Eval epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 20/20 [00:05<00:00,  3.45batch/s]","output_type":"stream"},{"name":"stdout","text":"\nEpoch 15\ntrain loss: 2.77764613, accuracy: 0.40558508\nval loss: 2.64072471, accuracy: 0.40351564\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Test accuracy","metadata":{"id":"zxNur_ZbcCK-"}},{"cell_type":"code","source":"test_accuracy, test_loss = eval_epoch(model, test_dataloader, loss_criterion, device)\nprint('test loss: %10.8f, accuracy: %10.8f'%(test_loss, test_accuracy))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":459,"status":"ok","timestamp":1714823716783,"user":{"displayName":"Cosmin Moarcas","userId":"10669116471855019652"},"user_tz":-180},"id":"6yVrOKUzcEph","outputId":"9dff45bc-875c-4184-e942-9c25085b329e","execution":{"iopub.status.busy":"2024-05-16T11:04:05.922298Z","iopub.execute_input":"2024-05-16T11:04:05.923159Z","iopub.status.idle":"2024-05-16T11:04:11.984914Z","shell.execute_reply.started":"2024-05-16T11:04:05.923126Z","shell.execute_reply":"2024-05-16T11:04:11.983985Z"},"trusted":true},"execution_count":175,"outputs":[{"name":"stdout","text":"Eval epoch\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 20/20 [00:06<00:00,  3.30batch/s]","output_type":"stream"},{"name":"stdout","text":"test loss: 1.22215991, accuracy: 0.45390627\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Accuracy and loss plot","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_predictions_and_labels(model, dataloader, device):\n    model.eval()\n    predictions = []\n    labels = []\n    with torch.no_grad():\n        for batch_idx, batch in tqdm(enumerate(val_dataloader)):\n            batch_mfcc, batch_labels = batch\n            current_batch_size = batch_mfcc.size(0)\n\n            # move data to GPU\n            batch_mfcc = batch_mfcc.to(device)\n            batch_labels = batch_labels.to(device)\n\n            # batch_size x 10\n            output = model(batch_mfcc)\n\n            predictions.append(output.argmax(dim=1, keepdim=True))\n            labels.append(batch_labels)\n\n    predictions = torch.cat(predictions, dim=0)\n    labels = torch.cat(labels, dim=0)\n\n    return predictions, labels","metadata":{"id":"XdzPgbfbeeLh"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Confusion matrix","metadata":{"id":"XL4ELVNmd51e"}},{"cell_type":"code","source":"predictions, labels = get_predictions_and_labels(model, test_dataloader, device)\ncm = confusion_matrix(labels.cpu().numpy(), predictions.cpu().numpy())","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1714825883795,"user":{"displayName":"Cosmin Moarcas","userId":"10669116471855019652"},"user_tz":-180},"id":"WjmyOrQBd7tg","outputId":"2bf11975-7cbb-41e9-c786-d2e0d168b02a"},"execution_count":null,"outputs":[{"name":"stderr","output_type":"stream","text":"163it [00:00, 685.48it/s]\n"}]},{"cell_type":"code","source":"labels = [\"american\", \"australian\", \"bangla\", \"british\", \"indian\", \"malayalam\", \"odiya\", \"telugu\", \"welsh\"]\n\ndf_cm = pd.DataFrame(cm, index = [i for i in labels],\n                  columns = [i for i in labels])\nplt.figure(figsize = (10, 8))\nsn.heatmap(df_cm, annot=True, fmt='g')\nplt.savefig('/content/drive/MyDrive/licenta/confustionMatrix')","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":676},"executionInfo":{"elapsed":1521,"status":"ok","timestamp":1714826164798,"user":{"displayName":"Cosmin Moarcas","userId":"10669116471855019652"},"user_tz":-180},"id":"vZ4w8kbygIKA","outputId":"063c4e46-65e3-4109-ddf1-ab1370a323e0"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1000x800 with 2 Axes>"]},"metadata":{}}]}]}